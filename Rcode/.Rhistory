# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
avg_score = 0.0
for ( i in 1:20){
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
#Province_SVM
# print(i)
# result_test = testData_province_SVM(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Porvince_lm
# result_test = testData_province_lm(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Lm model
Model_linear = lm(formula = happiness ~.,data = train_data )
lm_test_result = predict(Model_linear,test_data)
score = result_compare(data.frame(lm_test_result),test_label)
# score
# print(i)
# type_reg = "eps-regression"
# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
avg_score/20
avg_score = 0.0
for ( i in 1:20){
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
#Province_SVM
# print(i)
# result_test = testData_province_SVM(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Porvince_lm
# result_test = testData_province_lm(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Lm model
Model_linear = lm(formula = happiness ~.,data = train_data )
lm_test_result = predict(Model_linear,test_data)
score = result_compare(data.frame(lm_test_result),test_label)
# score
# print(i)
# type_reg = "eps-regression"
# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
avg_score/20
avg_score = 0.0
for ( i in 1:200){
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
#Province_SVM
# print(i)
# result_test = testData_province_SVM(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Porvince_lm
# result_test = testData_province_lm(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Lm model
Model_linear = lm(formula = happiness ~.,data = train_data )
lm_test_result = predict(Model_linear,test_data)
score = result_compare(data.frame(lm_test_result),test_label)
# score
# print(i)
# type_reg = "eps-regression"
# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
avg_score/200
summary(Model_linear)
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
data = Outlier_delete(s)
data_id = data.frame(data[,"id"])
data = Interpolate_ALL(data)
col_names_for_test = get_Col_names_For_test(data)
data = Combine_All_features(data)
dim(data)
tem_store = data
colnames(data)
data = subset(data,select = -c(survey_type,province,nationality,edu,income,
political,floor_area,health_problem,hukou,
hukou_loc,leisure_12,socialize,learn,socia_outing,
work_exper,family_income,son,f_political,f_work_14,
m_birth,m_political,inc_exp,invest,inc_income,trust_familar,
property_own,property_other,media_old,media_new,insurance,effort,f_birth,
religion_freq,house,marital))
#以下进行归一化
data_label = data.frame(data[,"happiness"])
colnames(data_label) = "happiness"
data = subset(data,select = -c(happiness))
data = scale(data,center=T,scale=T)
data = data.frame(cbind(data_label,data))
# data = data.frame(cbind(data,data_province))
Model_linear = lm(formula = happiness ~.,data = data )
#以下进行测试 nn 的性能
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
train_label = data.frame(data[index==1,"happiness"])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
n <- names(train_data)
f <- as.formula(paste("happiness ~", paste(n[!n %in% "happiness"], collapse = " + ")))
f
library(neuralnet)
nn <- neuralnet(f,data=train_data,hidden = 3,linear.output=T)
nn <- neuralnet(f,data=train_data,hidden = 2,linear.output=T)
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
data = Outlier_delete(s)
data_id = data.frame(data[,"id"])
data = Interpolate_ALL(data)
col_names_for_test = get_Col_names_For_test(data)
data = Combine_All_features(data)
dim(data)
tem_store = data
data = subset(data,select = -c(survey_type,province,nationality,edu,income,
political,floor_area,health_problem,hukou,
hukou_loc,leisure_12,socialize,learn,socia_outing,
work_exper,family_income,son,f_political,f_work_14,
m_birth,m_political,inc_exp,invest,inc_income,trust_familar,
property_own,property_other,media_old,media_new,insurance,effort,f_birth,
religion_freq,house,marital))
data_label = data.frame(data[,"happiness"])
colnames(data_label) = "happiness"
data = subset(data,select = -c(happiness))
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
data <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
# data = scale(data,center=T,scale=T)
data = data.frame(cbind(data_label,data))
#以下进行测试 nn 的性能
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
train_label = data.frame(data[index==1,"happiness"])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
n <- names(train_data)
f <- as.formula(paste("happiness ~", paste(n[!n %in% "happiness"], collapse = " + ")))
library(neuralnet)
nn <- neuralnet(f,data=train_data,hidden = 2,linear.output=T)
net.predict<-compute(nn,test_data)
nn <- neuralnet(f,data=train_data,hidden = 2,linear.output=T,err.fct = "sse",stepmax = 1e+06,
threshold = 0.1)
net.predict<-compute(nn,test_data)
net.predict
score = result_compare(data.frame(net.predict),test_label)
score
dim(net.predict)
length(net.predict)
net.predict = data.frame
dim(net.predict)
net.predict = data.frame(net.predict)
dim(net.predict)
net.predict<-compute(nn,test_data)
result = data.frame(net.predict$net.result)
dim(result)
dim(test_data)
score = result_compare(data.frame(result),test_label)
score
rm(list=ls())
source("DataProcessFunctions.R")
source("TestSetProcess.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
library(e1071)
library(arules)
library(glmnet)
library("neuralnet")
library(nnet)
library(rpart)
library(neuralnet)
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
data = Outlier_delete(s)
data_id = data.frame(data[,"id"])
data = Interpolate_ALL(data)
col_names_for_test = get_Col_names_For_test(data)
data = Combine_All_features(data)
data = subset(data,select = -c(survey_type,province,nationality,edu,income,
political,floor_area,health_problem,hukou,
hukou_loc,leisure_12,socialize,learn,socia_outing,
work_exper,family_income,son,f_political,f_work_14,
m_birth,m_political,inc_exp,invest,inc_income,trust_familar,
property_own,property_other,media_old,media_new,insurance,effort,f_birth,
religion_freq,house,marital))
data_label = data.frame(data[,"happiness"])
colnames(data_label) = "happiness"
data = subset(data,select = -c(happiness))
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
data <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
# data = scale(data,center=T,scale=T)
data = data.frame(cbind(data_label,data))
test_set = getTestdata(col_names_for_test)
test_set = subset(test_set,select = -c(survey_type,province,nationality,edu,income,
political,floor_area,health_problem,hukou,
hukou_loc,leisure_12,socialize,learn,socia_outing,
work_exper,family_income,son,f_political,f_work_14,
m_birth,m_political,inc_exp,invest,inc_income,trust_familar,
property_own,property_other,media_old,media_new,insurance,effort,f_birth,
religion_freq,house,marital))
maxs <- apply(test_set, 2, max)
mins <- apply(test_set, 2, min)
test_set <- as.data.frame(scale(test_set, center = mins, scale = maxs - mins))
dim(test_set)
dim(data)
n <- names(data)
f <- as.formula(paste("happiness ~", paste(n[!n %in% "happiness"], collapse = " + ")))
nn <- neuralnet(f,data=data,hidden = 4,linear.output=T,err.fct = "sse",stepmax = 1e+06,
threshold = 0.05)
nn_5 <- neuralnet(f,data=data,hidden = 5,linear.output=T,err.fct = "sse",stepmax = 1e+06,
threshold = 0.05)
nn_5 <- neuralnet(f,data=data,hidden = 5,linear.output=T,err.fct = "sse",stepmax = 1e+06,
threshold = 0.04)
nn_5 <- neuralnet(f,data=data,hidden = 5,linear.output=T,err.fct = "sse",stepmax = 1e+06,
threshold = 0.05)
net.predict<-compute(nn_5,test_data)
net.predict<-compute(nn_5,test_set)
result = data.frame(net.predict$net.result)
writeResult(result)
new_result = read.csv("D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_submit.csv")
class(new_result[2,2])
new_result[2,2]
rm(list=ls())
source("DataProcessFunctions.R")
source("TestSetProcess.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
library(e1071)
library(arules)
library(glmnet)
library("neuralnet")
library(nnet)
library(rpart)
library(neuralnet)
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
data = Outlier_delete(s)
data_id = data.frame(data[,"id"])
data = Interpolate_ALL(data)
col_names_for_test = get_Col_names_For_test(data)
data = Combine_All_features(data)
dim(data)
tem_store = data
colnames(data)
data = subset(data,select = -c(survey_type,province,nationality,edu,income,
political,floor_area,health_problem,hukou,
hukou_loc,leisure_12,socialize,learn,socia_outing,
work_exper,family_income,son,f_political,f_work_14,
m_birth,m_political,inc_exp,invest,inc_income,trust_familar,
property_own,property_other,media_old,media_new,insurance,effort,f_birth,
religion_freq,house,marital))
data_label = data.frame(data[,"happiness"])
colnames(data_label) = "happiness"
data = subset(data,select = -c(happiness))
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
data <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
# data = scale(data,center=T,scale=T)
data = data.frame(cbind(data_label,data))
data_centra = data
avg_score = 0.0
for ( i in 1:200){
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
#Province_SVM
# print(i)
# result_test = testData_province_SVM(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Porvince_lm
# result_test = testData_province_lm(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Lm model
Model_linear = lm(formula = happiness ~.,data = train_data )
lm_test_result = predict(Model_linear,test_data)
score = result_compare(data.frame(lm_test_result),test_label)
# score
# print(i)
# type_reg = "eps-regression"
# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
avg_score/200
avg_score = 0.0
for ( i in 1:200){
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
#Province_SVM
# print(i)
# result_test = testData_province_SVM(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Porvince_lm
# result_test = testData_province_lm(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Lm model
Model_linear = lm(formula = happiness ~.,data = train_data )
lm_test_result = predict(Model_linear,test_data)
score = result_compare(data.frame(lm_test_result),test_label)
# score
# print(i)
# type_reg = "eps-regression"
# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
avg_score/200
rm(list=ls())
source("DataProcessFunctions.R")
source("TestSetProcess.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
library(e1071)
library(arules)
library(glmnet)
library("neuralnet")
library(nnet)
library(rpart)
library(neuralnet)
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
data = Outlier_delete(s)
data_id = data.frame(data[,"id"])
data = Interpolate_ALL(data)
col_names_for_test = get_Col_names_For_test(data)
data = Combine_All_features(data)
dim(data)
tem_store = data
colnames(data)
data = subset(data,select = -c(survey_type,province,nationality,edu,income,
political,floor_area,health_problem,hukou,
hukou_loc,leisure_12,socialize,learn,socia_outing,
work_exper,family_income,son,f_political,f_work_14,
m_birth,m_political,inc_exp,invest,inc_income,trust_familar,
property_own,property_other,media_old,media_new,insurance,effort,f_birth,
religion_freq,house,marital))
data_label = data.frame(data[,"happiness"])
colnames(data_label) = "happiness"
data = subset(data,select = -c(happiness))
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
data <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
# data = scale(data,center=T,scale=T)
data = data.frame(cbind(data_label,data))
avg_score = 0.0
for ( i in 1:200){
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
#Province_SVM
# print(i)
# result_test = testData_province_SVM(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Porvince_lm
# result_test = testData_province_lm(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Lm model
Model_linear = lm(formula = happiness ~.,data = train_data )
lm_test_result = predict(Model_linear,test_data)
score = result_compare(data.frame(lm_test_result),test_label)
# score
# print(i)
# type_reg = "eps-regression"
# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
avg_score/200
summary(Model_linear)
data[,"gender"]
data[,"inc_ability"]
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
data_id = data.frame(data[,"id"])
data = Outlier_delete(s)
data = Interpolate_ALL(data)
col_names_for_test = get_Col_names_For_test(data)
data = Combine_All_features(data)
data_id = data.frame(data[,"id"])
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
data = Outlier_delete(s)
data_id = data.frame(data[,"id"])
data = Interpolate_ALL(data)
col_names_for_test = get_Col_names_For_test(data)
data = Combine_All_features(data)
data_label = data.frame(data[,"happiness"])
colnames(data_label) = "happiness"
data = subset(data,select = -c(happiness))
data = scale(data,center = T,scale = T)
# data = scale(data,center=T,scale=T)
data = data.frame(cbind(data_label,data))
avg_score = 0.0
for ( i in 1:200){
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
#Province_SVM
# print(i)
# result_test = testData_province_SVM(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Porvince_lm
# result_test = testData_province_lm(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Lm model
Model_linear = lm(formula = happiness ~.,data = train_data )
lm_test_result = predict(Model_linear,test_data)
score = result_compare(data.frame(lm_test_result),test_label)
# score
# print(i)
# type_reg = "eps-regression"
# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
summary(Model_linear)
data[,"inc_ability"]
data = subset(data,select = -c(survey_type,province,nationality,edu,income,
political,floor_area,health_problem,hukou,
hukou_loc,leisure_12,socialize,learn,socia_outing,
work_exper,family_income,son,f_political,f_work_14,
m_birth,m_political,inc_exp,invest,inc_income,trust_familar,
property_own,property_other,media_old,media_new,insurance,effort,f_birth,
religion_freq,house,marital))
avg_score = 0.0
for ( i in 1:200){
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.8,0.2))
train_data = data.frame(data[index==1,])
test_data = data.frame(data[index==2,])
test_data = subset(test_data,select = -c(happiness))
test_label = data.frame(data[index==2,1])
test_id = data.frame(data_id[index==2,1])
#Province_SVM
# print(i)
# result_test = testData_province_SVM(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Porvince_lm
# result_test = testData_province_lm(train_data,test_data,test_id)
# score = result_compare(data.frame(result_test),test_label)
#Lm model
Model_linear = lm(formula = happiness ~.,data = train_data )
lm_test_result = predict(Model_linear,test_data)
score = result_compare(data.frame(lm_test_result),test_label)
# score
# print(i)
# type_reg = "eps-regression"
# type_reg2 = "nu-regression"
# model_SVM_1 = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
# SVM_test_result_1 = predict(model_SVM_1,test_data)
# score = result_compare(data.frame(SVM_test_result_1),test_label)
avg_score = avg_score + score
}
summary(Model_linear)
avg_score/200
