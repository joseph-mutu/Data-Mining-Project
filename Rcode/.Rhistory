result
#对 test 数据进行同样的 PCA 处理
test_data = subset(test_data,select = -c(happiness))
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
new_data = as.data.frame(new_data_col_names[1])
col_names = as.vector(unlist(new_data_col_names[2]))
train_data = as.data.frame(getTraindata(new_data))
train_label = as.data.frame(getTrainLabel(train_data))
test_data = as.data.frame(getTestdata(new_data))
test_label = as.data.frame(getTestLabel(test_data))
#PCA
train_data = subset(train_data,select = -c(happiness))
train.pca = PCA(train_data,scale.unit = TRUE, graph = FALSE)
eig.ind = get_pca_ind(train.pca)
eig.vari = get_pca_var(train.pca)
rotate_matrix = as.matrix(eig.vari$coord)
train_pca_data = as.data.frame(eig.ind$coord)
train_label = unlist(train_label)
train_pca_data$happiness = train_label
train_pca_data = as.data.frame(train_pca_data)
dim(train_pca_data)
train_label
train_pca_data = train_pca_data[-610,]
Model_linear = lm(formula = happiness ~. +Dim.1:Dim.5,
data = train_pca_data )
#对 test 数据进行同样的 PCA 处理
test_data = subset(test_data,select = -c(happiness))
test_data = as.matrix(test_data)
test_data = scale(test_data)
dim(rotate_matrix)
dim(test_data)
test_data.pca = test_data %*% rotate_matrix
test_data.pca = data.frame(test_data.pca)
dim(test_data.pca)
result = predict(Model_linear, newdata = test_data.pca)
result
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
new_data = as.data.frame(new_data_col_names[1])
col_names = as.vector(unlist(new_data_col_names[2]))
train_data = as.data.frame(getTraindata(new_data))
train_label = as.data.frame(getTrainLabel(train_data))
test_data = as.data.frame(getTestdata(new_data))
test_label = as.data.frame(getTestLabel(test_data))
#对 test 数据进行同样的 PCA 处理
test_data = subset(test_data,select = -c(happiness))
test_data = as.matrix(test_data)
test_data = scale(test_data)
test_data
result
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
new_data = as.data.frame(new_data_col_names[1])
col_names = as.vector(unlist(new_data_col_names[2]))
train_label = new_data[,1]
#PCA
train_data = subset(new_data,select = -c(happiness))
train.pca = PCA(train_data,scale.unit = TRUE, graph = FALSE)
eig.ind = get_pca_ind(train.pca)
eig.vari = get_pca_var(train.pca)
rotate_matrix = as.matrix(eig.vari$coord)
train_pca_data = as.data.frame(eig.ind$coord)
train_label = unlist(train_label)
train_pca_data$happiness = train_label
train_pca_data = as.data.frame(train_pca_data)
dim(train_pca_data)
train_label
train_pca_data = train_pca_data[-610,]
Model_linear = lm(formula = happiness ~. +Dim.1:Dim.5,
data = train_pca_data )
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
dim(s)
for (i in dim(s)[1]){
if (s[i,1] > 5 | s[i,1] < 1){
print(i)
}
}
colnames(s)
colnames(s)
for (i in dim(s)[1]){
if (s[i,2] > 5 | s[i,2] < 1){
print(i)
}
}
for (i in dim(s)[1]){
if (s[i,2] > 5 || s[i,2] < 1){
print(i)
}
}
outlier = c()
for (i in dim(s)[1]){
if (s[i,2] > 5 || s[i,2] < 1){
outlier = c(outlier,i)
}
}
outlier
s[,2]
class(s[2,2])
class(s[611,2])
s[611,2]
s[610,2]
outlier = 0
for (i in dim(s)[1]){
if (s[i,2] > 5 | s[i,2] < 1){
outlier = outlier + 1
}
}
outlier
s[610,2]
for (i in dim(s)[1]){
if (s[i,2] < 1){
outlier = outlier + 1
}
}
outlier
dim(s)[1]
if(s[610,2]<1){
print("yes")
}
for (i in dim(s)[1]){
if (s[i,2] < 1){
print(s[i,2])
}
}
outlier
print(s[i,2])
outlier = c()
for (i in 1:dim(s)[1]){
if(s[i,2]>5 | s[i,2] < 1){
outlier = c(outlier,i)
}
}
outlier
dim(s)
s = s[-outlier,]
dim(s)
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
new_data = as.data.frame(new_data_col_names[1])
col_names = as.vector(unlist(new_data_col_names[2]))
dim(new_data)
train_label = new_data[,1]
#PCA
train_data = subset(new_data,select = -c(happiness))
train.pca = PCA(train_data,scale.unit = TRUE, graph = FALSE)
eig.ind = get_pca_ind(train.pca)
dim(eig.ind)
train_pca_data = as.data.frame(eig.ind$coord)
dim(train_pca_data)
train_data = getTraindata(train_pca_data)
test_data = getTestdata(train_pca_data)
source("DataProcessFunctions.R")
train_label = unlist(getTrainLabel(train_label))
source("DataProcessFunctions.R")
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
new_data = as.data.frame(new_data_col_names[1])
col_names = as.vector(unlist(new_data_col_names[2]))
train_test_label = new_data[,1]
#PCA
train_data = subset(new_data,select = -c(happiness))
train.pca = PCA(train_data,scale.unit = TRUE, graph = FALSE)
eig.ind = get_pca_ind(train.pca)
eig.vari = get_pca_var(train.pca)
rotate_matrix = as.matrix(eig.vari$coord)
train_pca_data = as.data.frame(eig.ind$coord)
dim(train_pca_data)
train_data = getTraindata(train_pca_data)
test_data = getTestdata(train_pca_data)
train_label = unlist(getTrainLabel(train_test_label))
test_label = unlist(getTestLabel(train_test_label))
dim(train_test_label)
length(train_test_label)
source("DataProcessFunctions.R")
test_label = unlist(getTestLabel(train_test_label))
source("DataProcessFunctions.R")
test_label = unlist(getTestLabel(train_test_label))
dim(train_label)
length(train_label)
length(test_label)
ckass(test_label)
class(test_label)
train_pca_data$happiness = train_label
train_data$happiness = train_label
train_data = as.data.frame(train_data)
dim(train_data)
colnames(train_data)
Model_linear = lm(formula = happiness ~. +Dim.1:Dim.5,
data = train_data )
dim(test_data)
colnames(test_data)
result = predict(Model_linear, newdata = test_data)
result
dim(result)
length(result)
dim(test_label)
length(test_label)
score = result_compare(result,test_label)
source("test_functions.R")
score = result_compare(result,test_label)
source("test_functions.R")
score = result_compare(result,test_label)
score
#PCA
train_data = subset(new_data,select = -c(happiness))
source("DataProcessFunctions.R")
test_data = getTestsetComplete()
dim(test_data)
source("DataProcessFunctions.R")
test_data = getTestsetComplete()
dim(test_data)
dim(train_data)
source("DataProcessFunctions.R")
dim(test_data)
test_data = processTestdata(test_data,col_names)
source("DataProcessFunctions.R")
test_data = processTestdata(test_data,col_names)
source("DataProcessFunctions.R")
test_data = processTestdata(test_data,col_names)
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
new_data = as.data.frame(new_data_col_names[1])
col_names = as.vector(unlist(new_data_col_names[2]))
train_test_label = new_data[,1]
#PCA
train_data = subset(new_data,select = -c(happiness))
test_data = getTestsetComplete()
dim(test_data)
dim(train_data)
test_data = processTestdata(test_data,col_names)
col_names
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
new_data = as.data.frame(new_data_col_names[1])
col_names = as.vector(unlist(new_data_col_names[2]))
train_test_label = new_data[,1]
#PCA
train_data = subset(new_data,select = -c(happiness))
test_data = getTestsetComplete()
dim(test_data)
dim(train_data)
test_data = processTestdata(test_data,col_names)
dim(test_data)
train_test_data = cbind(train_data,test_data)
train_test_data = rbind(train_data,test_data)
dim(train_test_data)
train.pca = PCA(train_test_data,scale.unit = TRUE, graph = FALSE)
eig.ind = get_pca_ind(train.pca)
train_pca_data = as.data.frame(eig.ind$coord)
dim(train_pca_data)
dim(train_data)
dim(train_data)[1]
train_data = train_pca_data[1:dim(train_data)[1],]
test_data = train_pca_data[dim(train_data)[1]+1:dim(test_data)[1],]
dim(test_data)
train_label = unlist(train_test_label)
dim(train_label)
length(train_label)
train_data$happiness = train_label
train_data = as.data.frame(train_data)
Model_linear = lm(formula = happiness ~. +Dim.1:Dim.5,
data = train_data )
result = predict(Model_linear, newdata = test_data)
result
dim(result)
length(result)
result = data.frame(result)
result[1]
result[1,1]
class(result[1,1])
writeResult(result)
writeResult(result)
source("writeResult.R")
result = data.frame(result)
writeResult(result)
new_result = read.csv("D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_submit.csv")
dim(new_result)
class(new_result[1,1])
class(new_result[2,2])
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
result = testData_PCA_Linear()
result = testData_PCA_Linear()
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
result = testData_PCA_Linear()
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
result = testData_PCA_Linear(new_data_col_names)
dim(result)
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
result = testData_PCA_Linear(new_data_col_names)
dim(result)
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
writeResult(result)
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
dim(new_data_col_names)
length(new_data_col_names)
length(new_data_col_names[1])
data = new_data_col_names[1]
data
dim(data)
data = data.frame(new_data_col_names)
dim(data)
class(data)
data = as.data.frame(new_data_col_names)
nrow(new_data_col_names)
data = new_data_col_names[1]
data = as.data.frame(data)
dim(data)
col_not_na = new_data_col_names[2]
col_not_na
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
col_na_names = getCol_names_From_new_data_col_names(new_data_col_names)
install.packages(e1071)
install.packages("e1071")
nrow(data)
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = (0.7,0.3))
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.7,0.3))
train_data = data[index==1,]
test_data = data[index==2,]
dim(test_data)
train_data
dim(train_data)
#SVM
library(e1071)
model_SVM = svm(happiness ~., data = train_data)
test = data[,'invest_6']
sum(test)
source("DataProcessFunctions.R")
source("writeResult.R")
source("test_functions.R")
library("FactoMineR")
library("factoextra")
s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_train_complete.csv')
new_data_col_names = processData(s)
data = getDataFrom_new_data_col_names(new_data_col_names)
col_na_names = getCol_names_From_new_data_col_names(new_data_col_names)
#抽样train和test
index = sample(2,nrow(data),replace = T,prob = c(0.7,0.3))
train_data = data[index==1,]
test_data = data[index==2,]
#SVM
library(e1071)
model_SVM = svm(happiness ~., data = train_data)
SVM_result = predict(model_SVM,test_data)
dim(SVM_result)
length(SVM_result)
dim(test_data)
colnames(test_data)
test_label = test_data[1]
score = result_compare(SVM_result,test_label)
score
test_label
SVM_result
length(test_label)
dim(test_label)
source("test_functions.R")
test_label = test_data[1]
dim(test_label)
score = result_compare(SVM_result,test_label)
test_label[1,1]
test_label[2,1]
test_label[2000,1]
SVM_result[2000]
SVM_result = unlist(predict(model_SVM,test_data))
SVM_result[2000]
SVM_result = data.frame(SVM_result)
SVM_result[2000]
SVM_result = as.vector(SVM_result)
SVM_result[2000]
SVM_result[2000]
SVM_result = unlist(predict(model_SVM,test_data))
SVM_result[2000]
test_label = test_data[1]
dim(test_label)
score = result_compare(SVM_result,test_label)
dim(SVM_result)
length(SVM_result)
dim(test_label)
SVM_result = data.frame(predict(model_SVM,test_data))
dim(SVM_result)
source("test_functions.R")
score = result_compare(SVM_result,test_label)
SVM_result[2000，1]
SVM_result[2000,1]
score
test_label[2000,1]
SVM_result[2000,1]
source("test_functions.R")
score = result_compare(SVM_result,test_label)
score
num = dim(test_label)[1]
num
score = 0.0
for (i in 1:num){
score = score + (SVM_result[1,i]-test_label[1,i])^2
}
score
source("test_functions.R")
score = result_compare(SVM_result,test_label)
score
model_SVM = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
#SVM
type_reg = "eps-regression"
model_SVM = svm(happiness ~., data = train_data,type = type_reg,kernel ="radial")
SVM_result = data.frame(predict(model_SVM,test_data))
score = result_compare(SVM_result,test_label)
score
model_SVM = svm(happiness ~., data = train_data,type = type_reg,kernel ="linear")
SVM_result = data.frame(predict(model_SVM,test_data))
score = result_compare(SVM_result,test_label)
score
model_SVM = svm(happiness ~., data = train_data,type = type_reg,kernel ="polynomial")
SVM_result = data.frame(predict(model_SVM,test_data))
score = result_compare(SVM_result,test_label)
score
model_SVM = svm(happiness ~., data = train_data,type = type_reg2,kernel ="polynomial")
type_reg2 = "nu-regression"
model_SVM = svm(happiness ~., data = train_data,type = type_reg2,kernel ="polynomial")
SVM_result = data.frame(predict(model_SVM,test_data))
score = result_compare(SVM_result,test_label)
score
model_SVM = svm(happiness ~., data = train_data,type = type_reg2,kernel ="radial")
SVM_result = data.frame(predict(model_SVM,test_data))
score = result_compare(SVM_result,test_label)
score
model_SVM = svm(happiness ~., data = train_data,type = type_reg2,kernel ="linear")
SVM_result = data.frame(predict(model_SVM,test_data))
score = result_compare(SVM_result,test_label)
score
#test
test_s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_test_complete.csv')
Test_data_Real = getTestdata(test_s,col_na_names)
dim(Test_data_Real)
col_na_names
Test_data_Real = processTestdata(test_s,col_na_names)
test_s = test_s[,col_na_names]
col_na_names = as.vector(col_na_names)
test_s = test_s[,col_na_names]
col_na_names = unlist(col_na_names)
test_s = test_s[,col_na_names]
#test
test_s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_test_complete.csv')
col_na_names = unlist(col_na_names)
Test_data_Real = processTestdata(test_s,col_na_names)
dim(Test_data_Real)
SVM_test_result = predict(model_SVM,Test_data_Real)
length()
length(SVM_test_result)
class(SVM_test_result[20])
writeResult(SVM_test_result)
test_s = read.csv('D:/Study/Jean Monnet/Data Mining/Project/Data/happiness_submit.csv')
dim(test_s)
dim(test_s[2,2])
class(test_s[2,2])
